import discord
from discord.ext import commands
from discord import app_commands
import os
import random
import json
import asyncpg
from dotenv import load_dotenv

load_dotenv()

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='MS!', intents=intents)

WELCOME_CHANNEL_ID = 1428075891874861076

# ==================== CONFIGURA√á√ïES GLOBAIS ====================
CRAFTING = {
    'ü™µ‚öîÔ∏è': {'nome': 'Espada de Madeira', 'mats': {'ü™µ': 2}, 'dano': 1},
    '‚öôÔ∏è‚öîÔ∏è': {'nome': 'Espada de Ferro', 'mats': {'ü™µ': 2, '‚öôÔ∏è': 1}, 'dano': 1.5},
    'üíé‚öîÔ∏è': {'nome': 'Espada de Diamante', 'mats': {'ü™µ': 2, 'üíé': 1}, 'dano': 2.5},
    'üî∑‚öîÔ∏è': {'nome': 'Espada de Netherita', 'mats': {'üíé‚öîÔ∏è': 1, 'üî∑': 2}, 'dano': 3},
    'üõ°Ô∏è': {'nome': 'Escudo', 'mats': {'‚öôÔ∏è': 1, 'ü™µ': 6}},
    'ü•©üß•': {'nome': 'Armadura de Couro', 'mats': {'ü•©': 5}, 'def': 1},
    '‚öôÔ∏èüß•': {'nome': 'Armadura de Ferro', 'mats': {'‚öôÔ∏è': 5}, 'def': 1.5},
    'üíéüß•': {'nome': 'Armadura de Diamante', 'mats': {'üíé': 5}, 'def': 2},
    'üî∑üß•': {'nome': 'Armadura de Netherita', 'mats': {'üíéüß•': 1, 'üî∑': 3}, 'def': 2.5},
    'üõèÔ∏è': {'nome': 'Cama', 'mats': {'ü™µ': 3}},
    'üïØÔ∏è': {'nome': 'Tocha', 'mats': {'ü™µ': 1, 'ü™®': 1}},
}

MOBS = {
    'üßü': {'nome': 'Zumbi', 'hp': (8, 12), 'dano': (2, 6), 'xp': 8, 'drops': {'ü•©': (1, 2)}},
    'üï∑Ô∏è': {'nome': 'Aranha', 'hp': (10, 14), 'dano': (3, 7), 'xp': 10, 'drops': {'ü™®': (1, 2)}},
    'üíÄ': {'nome': 'Esqueleto', 'hp': (9, 13), 'dano': (3, 6), 'xp': 12, 'drops': {'‚öôÔ∏è': (1, 1)}},
    'üß®': {'nome': 'Creeper', 'hp': (12, 16), 'dano': (4, 8), 'xp': 15, 'drops': {'üî•': (1, 2)}},
    'üê∑': {'nome': 'Piglin', 'hp': (15, 20), 'dano': (7, 8), 'xp': 20, 'drops': {'üíé': (2, 5)}},
    'üî•': {'nome': 'Blaze', 'hp': (15, 15), 'dano': (4, 5), 'xp': 25, 'drops': {'üî±': (0, 1)}},
    'üêâ': {'nome': 'Ender Dragon', 'hp': (70), 'dano': (10, 15), 'xp': 100, 'drops': {'üî∑': (10)}},
}

# ==================== DADOS GLOBAIS ====================
aventuras = {}
db_pool = None

# ==================== BANCO DE DADOS ====================
async def init_db():
    """Inicializa o pool de conex√µes e cria a tabela"""
    global db_pool
    try:
        db_url = os.getenv('DATABASE_URL')
        if not db_url:
            print("‚ùå DATABASE_URL n√£o encontrada no .env!")
            return False
        
        db_pool = await asyncpg.create_pool(db_url, min_size=1, max_size=10)
        print("‚úÖ Pool de conex√µes criado")
        
        # Criar tabela se n√£o existir
        async with db_pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS jogadores (
                    uid BIGINT PRIMARY KEY,
                    dados JSONB NOT NULL
                )
            ''')
        print("‚úÖ Tabela de jogadores criada")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao inicializar DB: {e}")
        return False

async def salvar_jogador(uid, dados):
    """Salva um jogador no banco de dados"""
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO jogadores (uid, dados) VALUES ($1, $2) ON CONFLICT (uid) DO UPDATE SET dados = $2',
                uid, json.dumps(dados)
            )
    except Exception as e:
        print(f"‚ùå Erro ao salvar jogador {uid}: {e}")

async def carregar_jogador(uid):
    """Carrega um jogador do banco de dados"""
    try:
        async with db_pool.acquire() as conn:
            resultado = await conn.fetchval(
                'SELECT dados FROM jogadores WHERE uid = $1',
                uid
            )
            if resultado:
                return json.loads(resultado)
        return None
    except Exception as e:
        print(f"‚ùå Erro ao carregar jogador {uid}: {e}")
        return None

async def carregar_todos_jogadores():
    """Carrega TODOS os jogadores do banco"""
    try:
        async with db_pool.acquire() as conn:
            resultados = await conn.fetch(
                'SELECT uid, dados FROM jogadores'
            )
            jogadores = {}
            for row in resultados:
                jogadores[row['uid']] = json.loads(row['dados'])
            print(f"‚úÖ {len(jogadores)} jogadores carregados do banco")
            return jogadores
    except Exception as e:
        print(f"‚ùå Erro ao carregar todos os jogadores: {e}")
        return {}

async def salvar_jogadores():
    """Salva TODOS os jogadores (fun√ß√£o global)"""
    try:
        async with db_pool.acquire() as conn:
            for uid, dados in aventuras.items():
                await conn.execute(
                    'INSERT INTO jogadores (uid, dados) VALUES ($1, $2) ON CONFLICT (uid) DO UPDATE SET dados = $2',
                    uid, json.dumps(dados)
                )
        print(f"‚úÖ {len(aventuras)} jogadores salvos no banco")
    except Exception as e:
        print(f"‚ùå Erro ao salvar jogadores: {e}")

# ==================== EVENTOS ====================
@bot.event
async def on_ready():
    print(f'{bot.user} conectado com sucesso!')
    await bot.change_presence(
        activity=discord.Activity(type=discord.ActivityType.playing, name="Minecraft 2 - FASE 2.0"),
        status=discord.Status.online
    )
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Sincronizados {len(synced)} comandos slash")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

@bot.event
async def on_member_join(member):
    welcome_channel = bot.get_channel(WELCOME_CHANNEL_ID)
    if welcome_channel is None:
        return
    
    embed = discord.Embed(
        title=f"Bem-vindo(a), {member.name}! üëã",
        description=f"Seja bem-vindo(a) ao servidor!",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url if member.avatar else None)
    embed.add_field(name="Membro #", value=f"{member.guild.member_count}", inline=True)
    embed.add_field(name="Servidor", value=member.guild.name, inline=True)
    
    await welcome_channel.send(f"Ol√° {member.mention}!", embed=embed)

# ==================== COMMANDS DE DIVERS√ÉO ====================
piadas = [
    "Por que a matem√°tica foi √† praia? Para usar o c√°lculo!",
    "O que o Java disse ao C? Voc√™ n√£o me classe!",
    "Por que o Python foi ao psic√≥logo? Tinha problemas com identa√ß√£o!",
]

@bot.command(name='dados')
async def dados(ctx):
    d1, d2 = random.randint(1, 6), random.randint(1, 6)
    embed = discord.Embed(title="üé≤ Dados", description=f"**Dado 1:** {d1}\n**Dado 2:** {d2}\n**Total:** {d1+d2}", color=discord.Color.blue())
    embed.set_footer(text=f"Solicitado por {ctx.author.name}")
    await ctx.send(embed=embed)

@bot.command(name='piada')
async def piada(ctx):
    embed = discord.Embed(title="üòÇ Piada", description=random.choice(piadas), color=discord.Color.gold())
    await ctx.send(embed=embed)

@bot.command(name='moeda')
async def moeda(ctx):
    resultado = random.choice(["Cara ü™ô", "Coroa ü™ô"])
    embed = discord.Embed(title="ü™ô Moeda", description=resultado, color=discord.Color.yellow())
    await ctx.send(embed=embed)

@bot.command(name='sorteio')
async def sorteio(ctx):
    """Sorteia um vencedor entre as pessoas mencionadas"""
    if not ctx.message.mentions:
        embed = discord.Embed(title="‚ùå Erro", description="Mencione pelo menos um usu√°rio!\n\nExemplo: `MS!sorteio @user1 @user2`", color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    if len(ctx.message.mentions) > 50:
        embed = discord.Embed(title="‚ùå Erro", description="M√°ximo de 50 usu√°rios!", color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    total = len(ctx.message.mentions)
    porcentagem = (1 / total) * 100
    vencedor = random.choice(ctx.message.mentions)
    
    embed = discord.Embed(
        title="üéâ Resultado do Sorteio",
        description=f"Vencedor: {vencedor.mention}\nüìä Chance: {porcentagem:.2f}%",
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=vencedor.avatar.url if vencedor.avatar else None)
    embed.add_field(name="Participantes", value=total, inline=True)
    await ctx.send(embed=embed)

# ==================== COMMANDS DE INFO ====================
@bot.command(name='user')
async def user_cmd(ctx, usuario: discord.User = None):
    """Mostra informa√ß√µes de um usu√°rio"""
    try:
        if usuario is None:
            usuario = ctx.author
        
        embed = discord.Embed(title=f"Informa√ß√µes de {usuario.name}", color=discord.Color.blue())
        embed.set_thumbnail(url=usuario.avatar.url if usuario.avatar else None)
        embed.add_field(name="Nome", value=usuario.name, inline=True)
        embed.add_field(name="ID", value=usuario.id, inline=True)
        embed.add_field(name="Bot?", value="Sim ‚úÖ" if usuario.bot else "N√£o ‚ùå", inline=True)
        embed.add_field(name="Criado em", value=usuario.created_at.strftime("%d/%m/%Y"), inline=True)
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(title="‚ùå Erro", description=f"Usu√°rio n√£o encontrado: {e}", color=discord.Color.red())
        await ctx.send(embed=embed)

@bot.command(name='serverinfo')
async def serverinfo_cmd(ctx):
    """Mostra informa√ß√µes do servidor"""
    guild = ctx.guild
    embed = discord.Embed(title=f"Informa√ß√µes de {guild.name}", color=discord.Color.green())
    embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
    embed.add_field(name="ID", value=guild.id, inline=True)
    embed.add_field(name="Membros", value=guild.member_count, inline=True)
    embed.add_field(name="Canais", value=len(guild.channels), inline=True)
    embed.add_field(name="Dono", value=guild.owner.mention, inline=True)
    embed.add_field(name="Criado em", value=guild.created_at.strftime("%d/%m/%Y"), inline=True)
    await ctx.send(embed=embed)

# ==================== CARREGAR M√ìDULOS ====================
async def load_modules():
    """Carrega todos os m√≥dulos de blocos"""
    modules = ['blocos.aventura', 'blocos.combate', 'blocos.crafting', 'blocos.multiplayer', 'blocos.nether', 'blocos.end']
    
    for module in modules:
        try:
            await bot.load_extension(module)
            print(f"‚úÖ M√≥dulo {module} carregado com sucesso")
        except Exception as e:
            print(f"‚ùå ERRO ao carregar {module}: {e}")

@bot.event
async def setup_hook():
    global aventuras
    # ‚≠ê Inicializar banco de dados
    if await init_db():
        aventuras = await carregar_todos_jogadores()
    await load_modules()

# ==================== COMANDO PARA SALVAR MANUALMENTE ====================
@bot.command(name='salvar')
@commands.is_owner()
async def salvar_cmd(ctx):
    """Salva todos os dados dos jogadores (admin only)"""
    await salvar_jogadores()
    embed = discord.Embed(title="üíæ Dados Salvos!", description=f"‚úÖ {len(aventuras)} jogadores salvos", color=discord.Color.green())
    await ctx.send(embed=embed)

# ==================== RUN ====================
token = os.getenv('DISCORD_TOKEN')
if not token or token.strip() == "":
    print("‚ùå ERRO: Token n√£o encontrado no .env!")
    exit()
else:
    print("‚úÖ Token carregado com sucesso")
    print("üéÆ Minecraft 2 - FASE 2.0 (Modular com PostgreSQL)")
    bot.run(token)
